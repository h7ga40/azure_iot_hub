//------------------------------------------------------------------------------
//  TOPPERS/ASP Windows Debug Environment
//  Copyright (C) 2010-2019 Cores Co., Ltd. Japan
//------------------------------------------------------------------------------
// $Id: UsbBluetooth.cpp 1970 2019-07-10 00:36:30Z coas-nagasima $
#include "StdAfx.h"
#include "WinKernel.h"
#include "UsbBluetooth.h"
#include "SifUSB.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

extern CKernel *g_Kernel;

CUSBBluetooth::CUSBBluetooth(CSifUSB *owner)
{
	m_Owner = owner;
	m_State = 0;
	m_Term = ubttIdle;
	m_Timer = -1;
	m_Addr = -1;
	m_RecvACLDataPos = 0;
}

CUSBBluetooth::~CUSBBluetooth()
{
}

__int64 CUSBBluetooth::GetTimer()
{
	return m_Timer;
}

void CUSBBluetooth::Progress(__int64 Timer)
{
	if(m_Timer != -1){
		m_Timer -= Timer;
		if(m_Timer < 0){
			m_Timer = 0;
		}
	}
}

void CUSBBluetooth::CallTimeOut()
{
	if(m_Timer != 0)
		return;

	// このブロックの終わりまで割り込み禁止
	CSifUSB::Lock lock(m_Owner);

	switch(m_Term){
	case ubttSetupStageData:
		SendHandshake();
		m_Term = ubttSetupStageHandshake;
		m_Timer = -1;
		break;
	case ubttDataStageTokenIn:
		SendSetupData();
		m_Term = ubttDataStageDataIn;
		m_Timer = -1;
		break;
	case ubttDataStageDataOut:
		SendHandshake();
		m_Term = ubttDataStageHandshakeOut;
		m_Timer = -1;
		break;
	case ubttStatusStageTokenIn:
		SendStatusData();
		m_Term = ubttStatusStageDataIn;
		m_Timer = -1;
		break;
	case ubttStatusStageDataOut:
		SendHandshake();
		m_Term = ubttStatusStageHandshakeOut;
		m_Timer = -1;
		break;
	case ubttDataTokenIn:
		if(SendDataIn())
			m_Term = ubttDataDataIn;
		else
			m_Term = ubttIdle;
		m_Timer = -1;
		break;
	case ubttDataDataOut:
		SendHandshake();
		m_Term = ubttDataHandshakeOut;
		m_Timer = -1;
		break;
	}
}

void CUSBBluetooth::Receive(const void *Data, int Size)
{
	// SYNC
	if((((uint8_t *)Data)[0] != USB_SYNC) || (Size < 2) || (Size >= 2 + 1024))
		return;

	// PID
	switch(((uint8_t *)Data)[1])
	{
	// SOF
	case (PID_SOF << 4) | ((~PID_SOF) & 0xF):
		break;
	// SETUP
	case (PID_SETUP << 4) | ((~PID_SETUP) & 0xF):
		{
			uint8_t addr, endp;

			addr = ((uint8_t *)Data)[2] >> 1;
			endp = (((uint8_t *)Data)[2] << 3) & 0x08;
			endp |= ((uint8_t *)Data)[3] >> 5;

			if((addr != 0) && (addr != m_Addr))
				break;

			m_EndPoint = endp;

			switch(m_Term){
			case ubttIdle:
				m_Term = ubttSetupStageToken;
				m_Timer = -1;
				break;
			default:
				throw std::exception();
			}
		}
		break;
	// IN
	case (PID_IN << 4) | ((~PID_IN) & 0xF):
		{
			uint8_t addr, endp;

			addr = ((uint8_t *)Data)[2] >> 1;
			endp = (((uint8_t *)Data)[2] << 3) & 0x08;
			endp |= ((uint8_t *)Data)[3] >> 5;

			if((addr != 0) && (addr != m_Addr))
				break;

			m_EndPoint = endp;

			switch(m_Term){
			case ubttIdle:
				m_Term = ubttDataTokenIn;
				m_Timer = 1;
				break;
			case ubttSetupStageHandshake:
				m_Term = ubttDataStageTokenIn;
				m_Timer = 1;
				break;
			case ubttDataStageHandshakeOut:
				m_Term = ubttStatusStageTokenIn;
				m_Timer = 1;
				break;
			default:
				throw std::exception();
			}
		}
		break;
	// OUT
	case (PID_OUT << 4) | ((~PID_OUT) & 0xF):
		{
			uint8_t addr, endp;

			addr = ((uint8_t *)Data)[2] >> 1;
			endp = (((uint8_t *)Data)[2] << 3) & 0x08;
			endp |= ((uint8_t *)Data)[3] >> 5;

			if((addr != 0) && (addr != m_Addr))
				break;

			m_EndPoint = endp;

			switch(m_Term){
			case ubttIdle:
				m_Term = ubttDataTokenOut;
				m_Timer = -1;
				break;
			case ubttSetupStageHandshake:
				m_Term = ubttDataStageTokenOut;
				m_Timer = -1;
				break;
			case ubttDataStageHandshakeIn:
				m_Term = ubttStatusStageTokenOut;
				m_Timer = -1;
				break;
			default:
				throw std::exception();
			}
		}
		break;
	// DATA0
	case (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF):
		m_Data1 = true;
		switch(m_Term){
		case ubttSetupStageToken:
			//ASSERT((Size - 2) == 8);

			memcpy(&m_SetupPacket, &((uint8_t *)Data)[2], Size - 2);

			m_Term = ubttSetupStageData;
			m_Timer = 1;
			break;
		case ubttDataStageTokenOut:
			RecvControlData(&((uint8_t *)Data)[2], Size - 2);

			m_Term = ubttDataStageDataOut;
			m_Timer = 1;
			break;
		case ubttDataTokenOut:
			RecvData(&((uint8_t *)Data)[2], Size - 2);

			m_Term = ubttDataDataOut;
			m_Timer = 1;
			break;
		default:
			throw std::exception();
		}
		break;
	// DATA1
	case (PID_DATA1 << 4) | ((~PID_DATA1) & 0xF):
		m_Data1 = false;
		switch(m_Term){
		case ubttDataStageTokenOut:
			RecvControlData(&((uint8_t *)Data)[2], Size - 2);

			m_Term = ubttDataStageDataOut;
			m_Timer = 1;
			break;
		case ubttStatusStageTokenOut:
			RecvControlData(&((uint8_t *)Data)[2], Size - 2);

			m_Term = ubttStatusStageDataOut;
			m_Timer = 1;
			break;
		case ubttDataTokenOut:
			RecvData(&((uint8_t *)Data)[2], Size - 2);

			m_Term = ubttDataDataOut;
			m_Timer = 1;
			break;
		default:
			throw std::exception();
		}
		break;
	// ACK
	case (PID_ACK << 4) | ((~PID_ACK) & 0xF):
		switch(m_Term){
		case ubttDataStageDataIn:
			m_Term = ubttDataStageHandshakeIn;
			m_Timer = -1;
			break;
		case ubttStatusStageDataIn:
			m_Term = ubttStatusStageHandshakeIn;
			m_Timer = -1;
			break;
		case ubttDataDataIn:
			m_Term = ubttDataHandshakeIn;
			m_Timer = -1;
			break;
		default:
			throw std::exception();
		}
		break;
	// NAK
	case (PID_NAK << 4) | ((~PID_NAK) & 0xF):
		switch(m_Term){
		case ubttDataStageDataIn:
			m_Term = ubttDataStageHandshakeIn;
			m_Timer = -1;
			break;
		case ubttStatusStageDataIn:
			m_Term = ubttStatusStageHandshakeIn;
			m_Timer = -1;
			break;
		case ubttDataDataIn:
			m_Term = ubttDataHandshakeIn;
			m_Timer = -1;
			break;
		default:
			throw std::exception();
		}
		break;
	// STALL
	case (PID_STALL << 4) | ((~PID_STALL) & 0xF):
		switch(m_Term){
		case ubttDataStageDataIn:
			m_Term = ubttDataStageHandshakeIn;
			m_Timer = -1;
			break;
		case ubttStatusStageDataIn:
			m_Term = ubttStatusStageHandshakeIn;
			m_Timer = -1;
			break;
		case ubttDataDataIn:
			m_Term = ubttDataHandshakeIn;
			m_Timer = -1;
			break;
		default:
			throw std::exception();
		}
		break;
	// PRE
	case (PID_PRE << 4) | ((~PID_PRE) & 0xF):
		break;
	}
}

void CUSBBluetooth::SendSetupData()
{
	TSetupPacket *packet = &m_SetupPacket;
	int size = 8;

	switch(packet->bRequest){
	case REQUEST_TYPE_GET_STATUS:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_DEVICE:
			GetStateOfDevice(packet, size);
			break;
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_INTERFACE:
			GetStateOfInterface(packet, size);
			break;
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_ENDPOINT:
			GetStateOfEndpoint(packet, size);
			break;
		default:
			SendEmptyData();
		}
		break;
	case REQUEST_TYPE_CLEAR_FEATURE:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_DEVICE:
			ClearFeatureOfDevice(packet, size);
			break;
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_INTERFACE:
			ClearFeatureOfInterface(packet, size);
			break;
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_ENDPOINT:
			ClearFeatureOfEndpoint(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_SET_FEATURE:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_DEVICE:
			SetFeatureOfDevice(packet, size);
			break;
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_INTERFACE:
			SetFeatureOfInterface(packet, size);
			break;
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_ENDPOINT:
			SetFeatureOfEndpoint(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_SET_ADDRESS:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_DEVICE:
			SetAddressOfDevice(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_GET_DESCRIPTOR:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_DEVICE:
			GetDescriptorOfDevice(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_SET_DESCRIPTOR:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_DEVICE:
			SetDescriptorOfDevice(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_GET_CONFIGURATION:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_DEVICE:
			GetConfigurationOfDevice(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_SET_CONFIGURATION:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_DEVICE:
			SetConfigurationOfDevice(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_GET_INTERFACE:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_DEVICE:
			GetInterfaceOfDevice(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_SET_INTERFACE:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_HOST_TO_DEVICE | REQUEST_TYPE_INTERFACE:
			SetInterfaceOfInterface(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	case REQUEST_TYPE_SYNCH_FRAME:
		switch(packet->bmRequestType & ~REQUEST_TYPE_TYPE_MASK){
		case REQUEST_TYPE_DEVICE_TO_HOST | REQUEST_TYPE_ENDPOINT:
			SynchFrameOfEndpoint(packet, size);
			break;
		default:
			throw std::exception();
		}
		break;
	default:
		throw std::exception();
	}
}

void CUSBBluetooth::SendStatusData()
{
	const static uint8_t data[] = {
		USB_SYNC, (PID_DATA1 << 4) | ((~PID_DATA1) & 0xF)
	};

	Send(data, sizeof(data));
}

void CUSBBluetooth::SendHandshake()
{
	const static uint8_t data[] = {
		USB_SYNC, (PID_ACK << 4) | ((~PID_ACK) & 0xF)
	};

	Send(data, sizeof(data));
}

void CUSBBluetooth::EnqueueInterruptData(const void *data, int size)
{
	TBluetoothDataNode *recvData = (TBluetoothDataNode *)new uint8_t[offsetof(TBluetoothDataNode, HCIEvent) + size];

	recvData->Size = size;
	memcpy(&recvData->HCIEvent, data, size);

	m_HCIEvent.push_back(recvData);
}

void CUSBBluetooth::EnqueueBulkData(const void *data, int size)
{
	TBluetoothDataNode *recvData = (TBluetoothDataNode *)new uint8_t[offsetof(TBluetoothDataNode, ACLData) + size];

	recvData->Size = size;
	memcpy(&recvData->ACLData, data, size);

	m_ACLData.push_back(recvData);
}

bool CUSBBluetooth::SendDataIn()
{
	switch(m_EndPoint){
	case 1:
		return SendInterruptData();
	case 2:
		return SendBulkData();
	default:
		static const uint8_t sendDataNak[2] = {
			USB_SYNC, (PID_NAK << 4) | ((~PID_NAK) & 0xF)
		};

		Send(sendDataNak, sizeof(sendDataNak));
		return false;
	}
}

void CUSBBluetooth::SendEmptyData()
{
	static uint8_t sendData[4] = {
		USB_SYNC, (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF), 0, 0
	};

	if(m_Data1)
		sendData[1] = (PID_DATA1 << 4) | ((~PID_DATA1) & 0xF);

	m_Data1 = !m_Data1;
	
	Send(sendData, sizeof(sendData));
}

bool CUSBBluetooth::SendInterruptData()
{
	if(m_HCIEvent.empty()){
		static const uint8_t sendDataNak[2] = {
			USB_SYNC, (PID_NAK << 4) | ((~PID_NAK) & 0xF)
		};

		Send(sendDataNak, sizeof(sendDataNak));

		return false;
	}

	TBluetoothDataNode *hciEvent = m_HCIEvent.front();
	m_HCIEvent.pop_front();

	hciEvent->Header[0] = USB_SYNC;
	if(!m_Data1)
		hciEvent->Header[1] = (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF);
	else
		hciEvent->Header[1] = (PID_DATA1 << 4) | ((~PID_DATA1) & 0xF);

	m_Data1 = !m_Data1;

	Send(hciEvent->Header, hciEvent->Size + 2);

	delete[] hciEvent;

	return true;
}

bool CUSBBluetooth::SendBulkData()
{
	if(m_ACLData.empty()){
		static const uint8_t sendDataNak[2] = {
			USB_SYNC, (PID_NAK << 4) | ((~PID_NAK) & 0xF)
		};

		Send(sendDataNak, sizeof(sendDataNak));

		return false;
	}

	TBluetoothDataNode *aclData = m_ACLData.front();
	m_ACLData.pop_front();

	aclData->Header[0] = USB_SYNC;
	if(!m_Data1)
		aclData->Header[1] = (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF);
	else
		aclData->Header[1] = (PID_DATA1 << 4) | ((~PID_DATA1) & 0xF);

	m_Data1 = !m_Data1;

	Send(aclData->Header, aclData->Size + 2);

	delete[] aclData;

	return true;
}

void CUSBBluetooth::GetStateOfDevice(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::GetStateOfInterface(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::GetStateOfEndpoint(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::ClearFeatureOfDevice(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::ClearFeatureOfInterface(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::ClearFeatureOfEndpoint(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::SetFeatureOfDevice(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::SetFeatureOfInterface(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::SetFeatureOfEndpoint(TSetupPacket *packet, int size)
{
	SendEmptyData();
}

void CUSBBluetooth::SetAddressOfDevice(TSetupPacket *packet, int size)
{
	static uint8_t sendData[2] = {
		USB_SYNC, (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF)
	};

	m_Addr = packet->wValue;

	if(m_Data1)
		sendData[1] = (PID_DATA1 << 4) | ((~PID_DATA1) & 0xF);

	m_Data1 = !m_Data1;

	Send(sendData, sizeof(sendData));
}

void CUSBBluetooth::GetDescriptorOfDevice(TSetupPacket *packet, int size)
{
	static const uint8_t sendDataNak[2] = {
		USB_SYNC, (PID_NAK << 4) | ((~PID_NAK) & 0xF)
	};
	const uint8_t *sendData = sendDataNak;
	int sendSize = sizeof(sendDataNak);

	switch((packet->wValue >> 8) | ((packet->wValue & 0xFF) << 8)){
	case DESCRIPTOR_TYPE_DEVICE: {
			static const uint8_t deviceDescriptor[2 + 18] = {
				USB_SYNC, (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF),
				0x12, 0x01, 0x00, 0x02, 0xe0, 0x01, 0x01, 0x40, 0x12, 0x0a, 0x01, 0x00, 0x91, 0x88, 0x00, 0x02, 0x00, 0x01
			};
			sendData = deviceDescriptor;
			sendSize = (packet->wLength < (sizeof(deviceDescriptor) - 2)) ? packet->wLength : sizeof(deviceDescriptor);
		}
		break;
	case DESCRIPTOR_TYPE_CONFIGURATION: {
			static const uint8_t configurationDescriptor[2 + 177] = {
				USB_SYNC, (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF),
				0x09, 0x02, 0xb1, 0x00, 0x02, 0x01, 0x00, 0xe0, 0x32,
				0x09, 0x04, 0x00, 0x00, 0x03, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x81, 0x03, 0x10, 0x00, 0x01,
				0x07, 0x05, 0x02, 0x02, 0x40, 0x00, 0x01,
				0x07, 0x05, 0x82, 0x02, 0x40, 0x00, 0x01,
				0x09, 0x04, 0x01, 0x00, 0x02, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x03, 0x01, 0x00, 0x00, 0x01,
				0x07, 0x05, 0x83, 0x01, 0x00, 0x00, 0x01,
				0x09, 0x04, 0x01, 0x01, 0x02, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x03, 0x01, 0x09, 0x00, 0x01,
				0x07, 0x05, 0x83, 0x01, 0x09, 0x00, 0x01,
				0x09, 0x04, 0x01, 0x02, 0x02, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x03, 0x01, 0x11, 0x00, 0x01,
				0x07, 0x05, 0x83, 0x01, 0x11, 0x00, 0x01,
				0x09, 0x04, 0x01, 0x03, 0x02, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x03, 0x01, 0x19, 0x00, 0x01,
				0x07, 0x05, 0x83, 0x01, 0x19, 0x00, 0x01,
				0x09, 0x04, 0x01, 0x04, 0x02, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x03, 0x01, 0x21, 0x00, 0x01,
				0x07, 0x05, 0x83, 0x01, 0x21, 0x00, 0x01,
				0x09, 0x04, 0x01, 0x05, 0x02, 0xe0, 0x01, 0x01, 0x00,
				0x07, 0x05, 0x03, 0x01, 0x31, 0x00, 0x01,
				0x07, 0x05, 0x83, 0x01, 0x31, 0x00, 0x01,
			};
			sendData = configurationDescriptor;
			sendSize = (packet->wLength < (sizeof(configurationDescriptor) - 2)) ? packet->wLength : sizeof(configurationDescriptor);
		}
		break;
	case DESCRIPTOR_TYPE_STRING: {
			static const uint8_t stringDescriptor[2 + 10] = {
				USB_SYNC, (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF),
				0x0A, 0x03, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44
			};
			sendData = stringDescriptor;
			sendSize = (packet->wLength < (sizeof(stringDescriptor) - 2)) ? packet->wLength : sizeof(stringDescriptor);
		}
		break;
	case DESCRIPTOR_TYPE_INTERFACE:
	case DESCRIPTOR_TYPE_ENDPOINT:
	case DESCRIPTOR_TYPE_DEVICE_QUALIFIER:
	case DESCRIPTOR_TYPE_OTHER_SPEED_CONFIGURATION:
	case DESCRIPTOR_TYPE_INTERFACE_POWER:
		break;
	}

	Send(sendData, sendSize);
}

void CUSBBluetooth::SetDescriptorOfDevice(TSetupPacket *packet, int size)
{
	throw std::exception();
}

void CUSBBluetooth::GetConfigurationOfDevice(TSetupPacket *packet, int size)
{
	throw std::exception();
}

void CUSBBluetooth::SetConfigurationOfDevice(TSetupPacket *packet, int size)
{
	static const uint8_t sendData[2 + 4] = {
		USB_SYNC, (PID_DATA0 << 4) | ((~PID_DATA0) & 0xF),
		0x04, 0x03, 0x09, 0x04
	};

	Send(sendData, sizeof(sendData));
}

void CUSBBluetooth::GetInterfaceOfDevice(TSetupPacket *packet, int size)
{
	throw std::exception();
}

void CUSBBluetooth::SetInterfaceOfInterface(TSetupPacket *packet, int size)
{
	throw std::exception();
}

void CUSBBluetooth::SynchFrameOfEndpoint(TSetupPacket *packet, int size)
{
	throw std::exception();
}

void CUSBBluetooth::RecvControlData(const void *data, int size)
{
	if(size == 0)
		return;

	if(m_State < 101){
		static const uint8_t CMD_W[] = { 0x03, 0x0C, 0x00 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x03, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 101;
			return;
		}
	}
	if(m_State < 102){
		static const uint8_t CMD_W[] = { 0x09, 0x10, 0x00 };
		static const uint8_t EVT_R[] = { 0x0E, 0x0A, 0x01, 0x09, 0x10, 0x00, 0x26, 0x27, 0x09, 0xDC, 0x1B, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 102;
			return;
		}
	}
	if(m_State < 103){
		static const uint8_t CMD_W[] = { 0x05, 0x10, 0x00 };
		static const uint8_t EVT_R[] = { 0x0E, 0x0B, 0x01, 0x05, 0x10, 0x00, 0x36, 0x01, 0x40, 0x0A, 0x00, 0x08, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 103;
			return;
		}
	}
	if(m_State < 104){
		static const uint8_t CMD_W[] = { 0x03, 0x10, 0x00 };
		static const uint8_t EVT_R[] = { 0x0E, 0x0C, 0x01, 0x03, 0x10, 0x00, 0xFF, 0xFF, 0x8F, 0xFE, 0xDB, 0xFF, 0x5B, 0x87 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 104;
			return;
		}
	}
	if(m_State < 105){
		static const uint8_t CMD_W[] = { 0x01, 0x0C, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x01, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 105;
			return;
		}
	}
	if(m_State < 106){
		static const uint8_t CMD_W[] = { 0x56, 0x0C, 0x01, 0x01 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x56, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 106;
			return;
		}
	}
	if(m_State < 107){
		static const uint8_t CMD_W[] = { 0x18, 0x0C, 0x02, 0x00, 0x60 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x18, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 107;
			return;
		}
	}
	if(m_State < 108){
		static const uint8_t CMD_W[] = { 0x24, 0x0C, 0x03, 0x00, 0x03, 0x82 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x24, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 108;
			return;
		}
	}
	if(m_State < 109){
		static const uint8_t CMD_W[] = { 0x13, 0x0C, 0x0E, 0x47, 0x52, 0x2D, 0x53, 0x41, 0x4B, 0x55, 0x52, 0x41, 0x32, 0x37, 0x32, 0x36, 0x00 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x13, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 109;
			return;
		}
	}
	if(m_State < 110){
		static const uint8_t CMD_W[] = { 0x1A, 0x0C, 0x01, 0x03 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x1A, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 110;
			return;
		}
	}
	if(m_State < 111){
		static const uint8_t CMD_W[] = { 0x13, 0x0C, 0x0E, 0x47, 0x52, 0x2D, 0x53, 0x41, 0x4B, 0x55, 0x52, 0x41, 0x32, 0x37, 0x32, 0x36, 0x00 };
		static const uint8_t EVT_R[] = { 0x0E, 0x04, 0x01, 0x13, 0x0C, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 111;
			return;
		}
	}
	if(m_State < 112){
		static const uint8_t CMD_W[] = { 0x05, 0x04, 0x0D, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x18, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01 };
		static const uint8_t EVT_R[] = { 0x0F, 0x04, 0x00, 0x01, 0x05, 0x04 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			m_State = 112;
			return;
		}
	}
	if(m_State < 113){
		static const uint8_t CMD_W[] = { 0x1A, 0x0C, 0x01, 0x03 };
		static const uint8_t EVT_R1[] = { 0x0E, 0x04, 0x01, 0x1A, 0x0C, 0x00 };
		static const uint8_t EVT_R2[] = { 0x12, 0x08, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01 };
		static const uint8_t EVT_R3[] = { 0x03, 0x0B, 0x00, 0x48, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			m_State = 113;
			return;
		}
	}
	if(m_State < 114){
		static const uint8_t CMD_W[] = { 0x1B, 0x04, 0x02, 0x48, 0x00 };
		static const uint8_t EVT_R1[] = { 0x20, 0x07, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01 };
		static const uint8_t EVT_R2[] = { 0x0F, 0x04, 0x00, 0x01, 0x1B, 0x04 };
		static const uint8_t EVT_R3[] = { 0x0B, 0x0B, 0x00, 0x48, 0x00, 0xFF, 0xFF, 0x8F, 0xFE, 0x9B, 0xFF, 0x59, 0x83 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			m_State = 114;
			return;
		}
	}
	if(m_State < 120){
		static const uint8_t CMD_W[] = { 0x05, 0x04, 0x0D, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x18, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01 };
		static const uint8_t EVT_R1[] = { 0x0F, 0x04, 0x00, 0x01, 0x05, 0x04 };
		static const uint8_t EVT_R2[] = { 0x12, 0x08, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01 };
		static const uint8_t EVT_R3[] = { 0x03, 0x0B, 0x00, 0x46, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			m_State = 120;
			return;
		}
	}
	if(m_State < 121){
		static const uint8_t CMD_W[] = { 0x1B, 0x04, 0x02, 0x46, 0x00 };
		static const uint8_t EVT_R1[] = { 0x20, 0x07, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01 };
		static const uint8_t EVT_R2[] = { 0x0F, 0x04, 0x00, 0x01, 0x1B, 0x04 };
		static const uint8_t EVT_R3[] = { 0x0B, 0x0B, 0x00, 0x46, 0x00, 0xFF, 0xFF, 0x8F, 0xFE, 0x9B, 0xFF, 0x59, 0x83 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			m_State = 121;
			return;
		}
	}
	if(m_State < 122){
		static const uint8_t CMD_W[] = { 0x11, 0x04, 0x02, 0x46, 0x00 };
		static const uint8_t EVT_R1[] = { 0x0F, 0x04, 0x00, 0x01, 0x11, 0x04 };
		static const uint8_t EVT_R2[] = { 0x17, 0x06, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			m_State = 122;
			return;
		}
	}
	if(m_State < 123){
		static const uint8_t CMD_W[] = { 0x0C, 0x04, 0x06, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };
		static const uint8_t EVT_R1[] = { 0x0E, 0x0A, 0x01, 0x0C, 0x04, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };
		static const uint8_t EVT_R2[] = { 0x31, 0x06, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			m_State = 123;
			return;
		}
	}
	if(m_State < 124){
		static const uint8_t CMD_W[] = { 0x2B, 0x04, 0x09, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x03, 0x00, 0x04 };
		static const uint8_t EVT_R1[] = { 0x0E, 0x0A, 0x01, 0x2B, 0x04, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };
		static const uint8_t EVT_R2[] = { 0x32, 0x09, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x01, 0x00, 0x04 };
		static const uint8_t EVT_R3[] = { 0x33, 0x0A, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0xAA, 0x9B, 0x09, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			m_State = 124;
			return;
		}
	}
	if(m_State < 125){
		static const uint8_t CMD_W[] = { 0x2C, 0x04, 0x06, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };
		static const uint8_t EVT_R1[] = { 0x0E, 0x0A, 0x01, 0x2C, 0x04, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };
		static const uint8_t EVT_R2[] = { 0x36, 0x07, 0x00, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00 };
		static const uint8_t EVT_R3[] = { 0x18, 0x17, 0x2D, 0x5C, 0x04, 0xDC, 0x1B, 0x00, 0x46, 0x86, 0xC6, 0xDA, 0x18, 0x69, 0x99, 0x6D, 0x25, 0x84, 0x6D, 0xFC, 0x20, 0x0E, 0xF9, 0xBB, 0x04 };
		static const uint8_t EVT_R4[] = { 0x06, 0x03, 0x00, 0x46, 0x00 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			EnqueueInterruptData(EVT_R4, sizeof(EVT_R4));
			m_State = 125;
			return;
		}
	}
	if(m_State < 126){
		static const uint8_t CMD_W[] = { 0x13, 0x04, 0x03, 0x46, 0x00, 0x01 };
		static const uint8_t EVT_R1[] = { 0x0F, 0x04, 0x00, 0x01, 0x13, 0x04 };
		static const uint8_t EVT_R2[] = { 0x08, 0x04, 0x00, 0x46, 0x00, 0x01 };

		if((size == sizeof(CMD_W)) && (memcmp(CMD_W, data, sizeof(CMD_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			m_State = 126;
			return;
		}
	}

	m_State = 999;
}

void CUSBBluetooth::RecvData(const void *_data, int _size)
{
	uint8_t data[sizeof(m_RecvACLData)];
	int size;

	if(_size == 0)
		return;

	if((m_RecvACLDataPos + _size) > sizeof(m_RecvACLData))
		throw std::exception();

	memcpy(&m_RecvACLData[m_RecvACLDataPos], _data, _size);
	m_RecvACLDataPos += _size;

	if(m_RecvACLDataPos < 4)
		return;

	size = 4 + (((uint16_t)m_RecvACLData[2]) | (((uint16_t)m_RecvACLData[3]) << 8));
	if(size > m_RecvACLDataPos)
		return;

	memcpy(&data, &m_RecvACLData, size);
	if(size < m_RecvACLDataPos){
		memmove(&m_RecvACLData[0], &m_RecvACLData[size], m_RecvACLDataPos - size);
	}
	m_RecvACLDataPos = 0;

	if(m_State < 115){
		static const uint8_t ACL_W[] = { 0x48, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x02, 0x01, 0x04, 0x00, 0x01, 0x00, 0x40, 0x00 };
		static const uint8_t ACL_R1[] = { 0x48, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x01, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00 };
		static const uint8_t EVT_R2[] = { 0x13, 0x05, 0x01, 0x48, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R3[] = { 0x48, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x01, 0x08, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueBulkData(ACL_R1, sizeof(ACL_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueBulkData(ACL_R3, sizeof(ACL_R3));
			m_State = 115;
			return;
		}
	}
	if(m_State < 116){
		static const uint8_t ACL_W[] = { 0x48, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x04, 0x02, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x02, 0xAA, 0x06 };
		static const uint8_t ACL_R[] = { 0x48, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x04, 0x35, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x04 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueBulkData(ACL_R, sizeof(ACL_R));
			m_State = 116;
			return;
		}
	}
	if(m_State < 117){
		static const uint8_t ACL_W[] = { 0x48, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x35, 0x0A, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x04 };
		static const uint8_t EVT_R[] = { 0x13, 0x05, 0x01, 0x48, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R[] = { 0x48, 0x20, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x02, 0x0A, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x04 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R, sizeof(EVT_R));
			EnqueueBulkData(ACL_R, sizeof(ACL_R));
			m_State = 117;
			return;
		}
	}
	if(m_State < 118){
		static const uint8_t ACL_W[] = { 0x48, 0x00, 0x18, 0x00, 0x14, 0x00, 0x40, 0x00, 0x06, 0x00, 0x01, 0x00, 0x0F, 0x35, 0x03, 0x19, 0x00, 0x0F, 0x06, 0xAA, 0x35, 0x05, 0x0A, 0x00, 0x01, 0xFF, 0xFF, 0x00 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x48, 0x00, 0x01, 0x00 };
		static const uint8_t EVT_R2[] = { 0x13, 0x05, 0x01, 0x48, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R3[] = { 0x48, 0x20, 0xA5, 0x00, 0xA1, 0x00, 0x40, 0x00, 0x07, 0x00, 0x01, 0x00, 0x9C, 0x00, 0x99, 0x35, 0x97, 0x35, 0x95, 0x09, 0x00, 0x01, 0x35, 0x03, 0x19, 0x11, 0x15, 0x09, 0x00, 0x04, 0x35, 0x1B, 0x35, 0x06, 0x19, 0x01, 0x00, 0x09, 0x00, 0x0F, 0x35, 0x11, 0x19, 0x00, 0x0F, 0x09, 0x01, 0x00, 0x35, 0x09, 0x09, 0x08, 0x00, 0x09, 0x86, 0xDD, 0x09, 0x08, 0x06, 0x09, 0x00, 0x05, 0x35, 0x03, 0x19, 0x10, 0x02, 0x09, 0x00, 0x06, 0x35, 0x09, 0x09, 0x6A, 0x61, 0x09, 0x00, 0x6A, 0x09, 0x01, 0x00, 0x09, 0x00, 0x09, 0x35, 0x08, 0x35, 0x06, 0x19, 0x11, 0x15, 0x09, 0x01, 0x00, 0x09, 0x01, 0x00, 0x25, 0x1D, 0x50, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x61, 0x6C, 0x20, 0x41, 0x64, 0x20, 0x48, 0x6F, 0x63, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00, 0x09, 0x01, 0x01, 0x25, 0x1D, 0x50, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x61, 0x6C, 0x20, 0x41, 0x64, 0x20, 0x48, 0x6F, 0x63, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00, 0x09, 0x03, 0x0A, 0x09, 0x00, 0x00, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueBulkData(ACL_R3, sizeof(ACL_R3));
			m_State = 118;
			return;
		}
	}
	if(m_State < 119){
		static const uint8_t ACL_W[] = { 0x48, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x06, 0x03, 0x04, 0x00, 0x40, 0x00, 0x40, 0x00 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x48, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x48, 0x20, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x07, 0x03, 0x04, 0x00, 0x40, 0x00, 0x40, 0x00 };
		static const uint8_t EVT_R3[] = { 0x05, 0x04, 0x00, 0x48, 0x00, 0x13 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			m_State = 119;
			return;
		}
	}
	if(m_State < 127){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x02, 0x04, 0x04, 0x00, 0x0F, 0x00, 0x41, 0x00 };
		static const uint8_t ACL_R[] = { 0x46, 0x20, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x02, 0x36, 0x04, 0x00, 0x01, 0x00, 0x40, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueBulkData(ACL_R, sizeof(ACL_R));
			m_State = 127;
			return;
		}
	}
	if(m_State < 128){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x36, 0x08, 0x00, 0x42, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			//EnqueueBulkData(ACL_R, sizeof(ACL_R));
			m_State = 128;
			return;
		}
	}
	if(m_State < 129){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x04, 0x05, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x02, 0xAA, 0x06 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x46, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x04, 0x08, 0x00, 0x00, 0x00, 0x41, 0x00, 0x01, 0x00, 0x00, 0x00 };
		static const uint8_t ACL_R3[] = { 0x46, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x04, 0x08, 0x00, 0x41, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			EnqueueBulkData(ACL_R3, sizeof(ACL_R3));
			m_State = 129;
			return;
		}
	}
	if(m_State < 130){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x04, 0x06, 0x08, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0x02, 0xAA, 0x06 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t EVT_R2[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R3[] = { 0x46, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x04, 0x37, 0x08, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0x02, 0x9B, 0x06 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueInterruptData(EVT_R2, sizeof(EVT_R2));
			EnqueueBulkData(ACL_R3, sizeof(ACL_R3));
			m_State = 130;
			return;
		}
	}
	if(m_State < 131){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x37, 0x0A, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x9B, 0x06 };
		static const uint8_t ACL_R[] = { 0x46, 0x20, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x04, 0x38, 0x08, 0x00, 0x42, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x04 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueBulkData(ACL_R, sizeof(ACL_R));
			m_State = 131;
			return;
		}
	}
	if(m_State < 132){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x38, 0x0A, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x04 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x46, 0x20, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x05, 0x0A, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x04 };
		static const uint8_t EVT_R3[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R4[] = { 0x46, 0x20, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x06, 0x0A, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x9B, 0x06 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			EnqueueInterruptData(EVT_R3, sizeof(EVT_R3));
			EnqueueBulkData(ACL_R4, sizeof(ACL_R4));
			m_State = 132;
			return;
		}
	}
	if(m_State < 133){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x0B, 0x00, 0x07, 0x00, 0x41, 0x00, 0x01, 0x01, 0x02, 0x11, 0x15, 0x11, 0x15 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x46, 0x20, 0x18, 0x00, 0x14, 0x00, 0x42, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x35, 0x03, 0x19, 0x01, 0x00, 0x03, 0xF8, 0x35, 0x05, 0x0A, 0x00, 0x00, 0xFF, 0xFF, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			m_State = 133;
			return;
		}
	}
	if(m_State < 134){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0xDA, 0x00, 0xD6, 0x00, 0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0xD1, 0x00, 0xCE, 0x36, 0x00, 0xCB, 0x36, 0x00, 0x6E, 0x09, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x02, 0x09, 0x00, 0x01, 0x36, 0x00, 0x03, 0x19, 0x11, 0x15, 0x09, 0x00, 0x04, 0x36, 0x00, 0x12, 0x36, 0x00, 0x03, 0x19, 0x01, 0x00, 0x36, 0x00, 0x09, 0x19, 0x00, 0x0F, 0x09, 0x01, 0x00, 0x36, 0x00, 0x00, 0x09, 0x00, 0x05, 0x36, 0x00, 0x03, 0x19, 0x10, 0x02, 0x09, 0x00, 0x06, 0x36, 0x00, 0x09, 0x09, 0x65, 0x6E, 0x09, 0x00, 0x6A, 0x09, 0x01, 0x00, 0x09, 0x00, 0x09, 0x36, 0x00, 0x09, 0x36, 0x00, 0x06, 0x19, 0x11, 0x15, 0x09, 0x01, 0x00, 0x09, 0x01, 0x00, 0x25, 0x07, 0x52, 0x58, 0x20, 0x50, 0x41, 0x4E, 0x55, 0x09, 0x01, 0x01, 0x25, 0x07, 0x52, 0x58, 0x20, 0x50, 0x41, 0x4E, 0x55, 0x09, 0x03, 0x0A, 0x09, 0x00, 0x00, 0x36, 0x00, 0x57, 0x09, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x01, 0x09, 0x00, 0x01, 0x36, 0x00, 0x03, 0x19, 0x11, 0x01, 0x09, 0x00, 0x04, 0x36, 0x00, 0x0E, 0x36, 0x00, 0x03, 0x19, 0x01, 0x00, 0x36, 0x00, 0x05, 0x19, 0x00, 0x03, 0x08, 0x01, 0x09, 0x00, 0x05, 0x36, 0x00, 0x03, 0x19, 0x10, 0x02, 0x09, 0x00, 0x06, 0x36, 0x00, 0x09, 0x09, 0x65, 0x6E, 0x09, 0x00, 0x6A, 0x09, 0x01, 0x00, 0x09, 0x00, 0x09, 0x36, 0x00, 0x09, 0x36, 0x00, 0x06, 0x19, 0x11, 0x01, 0x09, 0x01, 0x00, 0x09, 0x01, 0x00, 0x25, 0x06, 0x52, 0x58, 0x20, 0x53, 0x50, 0x50, 0x00 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x46, 0x20, 0x08, 0x00, 0x04, 0x00, 0x41, 0x00, 0x01, 0x02, 0x00, 0x00 };
		static const uint8_t ACL_R3[] = { 0x46, 0x20, 0x14, 0x00, 0x10, 0x00, 0x41, 0x00, 0x01, 0x03, 0x00, 0x0C, 0x08, 0x00, 0x08, 0x00, 0x86, 0xDD, 0x86, 0xDD, 0x08, 0x06, 0x08, 0x06 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			EnqueueBulkData(ACL_R3, sizeof(ACL_R3));
			m_State = 134;
			return;
		}
	}
	if(m_State < 135){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x08, 0x00, 0x04, 0x00, 0x41, 0x00, 0x01, 0x04, 0x00, 0x00 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x46, 0x20, 0x5C, 0x00, 0x58, 0x00, 0x41, 0x00, 0x01, 0x05, 0x00, 0x54, 0x33, 0x33, 0x00, 0x00, 0x00, 0x01, 0x33, 0x33, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x5E, 0x00, 0x00, 0x01, 0x01, 0x00, 0x5E, 0x00, 0x00, 0x01, 0x33, 0x33, 0x00, 0x00, 0x00, 0x0C, 0x33, 0x33, 0x00, 0x00, 0x00, 0x0C, 0x33, 0x33, 0xFF, 0xE6, 0xBB, 0x63, 0x33, 0x33, 0xFF, 0xE6, 0xBB, 0x63, 0x01, 0x00, 0x5E, 0x7F, 0xFF, 0xFA, 0x01, 0x00, 0x5E, 0x7F, 0xFF, 0xFA, 0x33, 0x33, 0x00, 0x00, 0x00, 0xFB, 0x33, 0x33, 0x00, 0x00, 0x00, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			m_State = 135;
			return;
		}
	}
	if(m_State < 136){
		static const uint8_t ACL_W[] = { 0x46, 0x00, 0x08, 0x00, 0x04, 0x00, 0x41, 0x00, 0x01, 0x06, 0x00, 0x00 };
		static const uint8_t EVT_R1[] = { 0x13, 0x05, 0x01, 0x46, 0x00, 0x01, 0x00 };
		static const uint8_t ACL_R2[] = { 0x46, 0x20, 0x55, 0x01, 0x51, 0x01, 0x41, 0x00, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x00, 0x45, 0x00, 0x01, 0x48, 0x02, 0xC7, 0x00, 0x00, 0x80, 0x11, 0x36, 0xDF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x44, 0x00, 0x43, 0x01, 0x34, 0xD7, 0x34, 0x01, 0x01, 0x06, 0x00, 0x84, 0xF7, 0x16, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xDC, 0x04, 0x5C, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63, 0x35, 0x01, 0x01, 0x3D, 0x07, 0x01, 0x00, 0x1B, 0xDC, 0x04, 0x5C, 0x2D, 0x0C, 0x07, 0x50, 0x43, 0x2D, 0x30, 0x32, 0x32, 0x39, 0x3C, 0x08, 0x4D, 0x53, 0x46, 0x54, 0x20, 0x35, 0x2E, 0x30, 0x37, 0x0C, 0x01, 0x0F, 0x03, 0x06, 0x2C, 0x2E, 0x2F, 0x1F, 0x21, 0x79, 0xF9, 0x2B, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		if((size == sizeof(ACL_W)) && (memcmp(ACL_W, data, sizeof(ACL_W)) == 0)){
			EnqueueInterruptData(EVT_R1, sizeof(EVT_R1));
			EnqueueBulkData(ACL_R2, sizeof(ACL_R2));
			m_State = 136;
			return;
		}
	}

	m_State = 999;
}

void CUSBBluetooth::Send(const void *data, int size)
{
	if(((uint8_t *)data)[1] == ((PID_NAK << 4) | ((~PID_NAK) & 0xF))){
		if(m_Term != ubttDataTokenIn)
			throw std::exception();
	}

	m_Owner->Receive(data, size);
}
