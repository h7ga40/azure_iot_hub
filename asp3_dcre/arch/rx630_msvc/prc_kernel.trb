# -*- coding: utf-8 -*-
#
#   TOPPERS/ASP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015,2016 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)～(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: core_kernel.trb 662 2016-02-27 02:33:51Z ertl-hiro $
# 

#
#		パス2の生成スクリプトのコア依存部（RX63x用）
#

# 
#  割込み番号と割込みハンドラ番号の定義
# 
#  RX630では割込み番号と割込みハンドラ番号が1対1で対応する．
# 
$INTNO_VALID = [ 16, 21, 23, *(27..59), 62, *(64..79), 90, 91, 92, 93, 98, 102, *(106..112), 114, *(122..167), *(170..203), *(214..253) ]
$INHNO_VALID = $INTNO_VALID

# 
#  例外番号の定義
# 
#  固定ベクタテーブルのベクタテーブルアドレスの小さい順番に例外番号を割振る．
#  (予約領域も含む)
# 

$EXCNO_VALID = [ 20, 23, 25, 30 ]

# 
#  INT割込みの番号
# 

$INTNO_INT = [ *(64..79) ]

# 
#  割込み番号，割込みハンドラ番号，例外番号の範囲
# 
# (予約領域も含む)
# 

$INTNO_RANGE = [ *(0..255) ]
$INHNO_RANGE = $INTNO_RANGE
$EXCNO_RANGE = [ *(0..31)  ]

# 
#  ATT_ISRで使用できる割込み番号とそれに対応する割込みハンドラ番号
# 

$INTNO_ATTISR_VALID = $INTNO_VALID
$INHNO_ATTISR_VALID = $INHNO_VALID


# 
#  DEF_INT／DEF_EXCで使用できる割込みハンドラ番号／CPU例外ハンドラ番号
# 

$INHNO_DEFINH_VALID = $INHNO_VALID
$EXCNO_DEFEXC_VALID = $EXCNO_VALID


# 
#  CFG_INTで使用できる割込み番号と割込み優先度
# 

$INTNO_CFGINT_VALID = $INHNO_VALID
$INTPRI_CFGINT_VALID = [ *(-7..-1) ]


# 
#  ターゲット非依存部に含まれる標準の割込み管理機能/例外管理機能の初期化処理を使用する
# 

$OMIT_INITIALIZE_INTERRUPT = false
$OMIT_INITIALIZE_EXCEPTION = false


# 
#  スタックサイズのチェック方法指定
# 

$CHECK_STKSZ_ALIGN = 4


# 
#  タスクスタックサイズの最小値
# 
#  タスク起動時に4byte,
#  割込み入口処理にて48byte, CPU例外入口処理にて84byte,
#  であるため, 最小値は88byteとする.
# 

$TARGET_MIN_STKSZ = 88

# 
#  定数定義
# 

$TA_POSEDGE = $TA_EDGE

#
#  ターゲット定義の割込み要求ライン属性
#
$TARGET_INTATR = $TA_POSEDGE|$TA_NEGEDGE|$TA_BOTHEDGE|$TA_LOWLEVEL

# 
# ターゲット依存の割込みハンドラ属性の定義
# 

$TARGET_INHATR = $TA_NONKERNEL


# 
# カーネル管理外割込みハンドラは固定させないため,
# INTNO_FIX_KERNEL
# INHNO_FIX_KERNEL
# INHNO_FIX_NONKERNEL
# INHNO_FIX_NONKERNEL
# を定義しない.
# 

$USE_INHINIB_TABLE = true
$USE_INTINIB_TABLE = true

#
#  標準テンプレートファイルのインクルード
#
IncludeTrb("kernel/kernel.trb")

#
#  割込み番号から割込み優先度及び属性を取り出すテーブル
#
$kernelCfgC.comment_header("Interrupt Level and Attribute Table")

$kernelCfgC.add("const CFG_INT_INFO _kernel_cfg_int_table[#{$INTNO_RANGE.length}] = {")
$INTNO_RANGE.each do |intnoVal|
  if $cfgData[:CFG_INT].has_key?(intnoVal)
    $kernelCfgC.append("\t{ #{-$cfgData[:CFG_INT][intnoVal][:intpri].val}, #{$cfgData[:CFG_INT][intnoVal][:intatr]} }")
  else
    $kernelCfgC.append("\t{  0, 0xFFFFFFFF }")
  end
  $kernelCfgC.append(",") if intnoVal < ($INTNO_RANGE.length - 1)
  $kernelCfgC.add("\t/* #{sprintf("%02u", intnoVal)} */ ")
end
$kernelCfgC.add2("};")

#
#  割込みベクタ及び割込みハンドラ定義
#
$kernelCfgC.add(<<EOS)
/*
 *  RX630 architecture dependency output file
 *
 *  Interrupt vector and interrupt handler definition
 */

void kernel_interrupt(INTNO intno, void (*int_entry)());

EOS

$INHNO_RANGE.each do |inhnoVal|
  if $cfgData[:DEF_INH].has_key?(inhnoVal)
    $kernelCfgC.add(<<EOS)
void _kernel_#{$cfgData[:DEF_INH][inhnoVal][:inthdr]}_#{inhnoVal}_entry(void)
{
	extern void #{$cfgData[:DEF_INH][inhnoVal][:inthdr]}(void);
	kernel_interrupt(#{inhnoVal}, &#{$cfgData[:DEF_INH][inhnoVal][:inthdr]});
}
EOS
    $kernelCfgC.add
  end
end

$kernelCfgC.add(<<EOS)
void _kernel_default_int_handler_entry()
{
	kernel_interrupt(0xFFFFFFFF, &_kernel_default_int_handler);
}

void _kernel_break_int_handler_entry(void)
{
#ifdef _MSC_VER
	extern void _stdcall DebugBreak();
#else
	extern void __attribute__((stdcall)) DebugBreak();
#endif
	DebugBreak();
}
EOS

$kernelCfgC.add(<<EOS)
void kernel_exception(EXCNO excno, void (*exc_entry)());
EOS

$EXCNO_VALID.each do |excnoVal|
  if $cfgData[:DEF_EXC].has_key?(excnoVal)
    $kernelCfgC.add(<<EOS)
void _kernel_#{$cfgData[:DEF_EXC][excnoVal][:exchdr]}_#{excnoVal}_entry(void)
{
	extern void #{$cfgData[:DEF_EXC][excnoVal][:exchdr]}(void);
	kernel_exception(#{excnoVal}, &#{$cfgData[:DEF_EXC][excnoVal][:exchdr]});
}
EOS
    $kernelCfgC.add
  end
end

$kernelCfgC.add

$kernelCfgC.append(<<EOS)
void _kernel_default_exc_handler_entry(void)
{
	kernel_exception(0xFFFFFFFF, &_kernel_default_exc_handler);
}
EOS

$kernelCfgC.append(<<EOS)
/*
 *  Variable vector table
 */

void (*const vvector_table[])() = {
EOS

$INHNO_RANGE.each do |inhnoVal|
  if $cfgData[:DEF_INH].has_key?(inhnoVal)
    $kernelCfgC.append("	_kernel_#{$cfgData[:DEF_INH][inhnoVal][:inthdr]}_#{inhnoVal}_entry,")
  elsif inhnoVal != 0
    $kernelCfgC.append("	_kernel_default_int_handler_entry,")
  else
    $kernelCfgC.append("	_kernel_break_int_handler_entry,")
  end
  $kernelCfgC.add("		/* #{sprintf("%02d", inhnoVal)} */")
end

$kernelCfgC.append(<<EOS)
};

EOS

$kernelCfgC.append(<<EOS)
void PowerON_Reset_PC(void);

/*
 *  Fixed vector table
 */

void (*const fvector_table[])(void) = {
	(void (*)(void))0xFFFFFFFF,	 /* Endian Select Register (little) */
	(void (*)(void))0x0,
	(void (*)(void))0xFFFFFFFF,	 /* OFS1 */
	(void (*)(void))0xFFFFFFFF,	 /* OFS0 */
	(void (*)(void))0x0,
	(void (*)(void))0x0,
	(void (*)(void))0x0,
	(void (*)(void))0x0,
	(void (*)(void))0xFFFFFFFF,	 /* Control code, ID code 1 - 3 */
	(void (*)(void))0xFFFFFFFF,	 /* ID code 4 - 7 */
	(void (*)(void))0xFFFFFFFF,	 /* ID code 8 - 11 */
	(void (*)(void))0xFFFFFFFF,	 /* ID code 12 - 15 */
EOS
(12..30).each do |excnoVal|
  if $cfgData[:DEF_EXC].has_key?(excnoVal)
    $kernelCfgC.append("	_kernel_#{$cfgData[:DEF_EXC][excnoVal][:exchdr]}_#{excnoVal}_entry,")
  elsif $EXCNO_VALID.include?(excnoVal)
    $kernelCfgC.append("	_kernel_default_exc_handler_entry,")
  else
    $kernelCfgC.append("	(void (*)(void))0x0,")
  end
  $kernelCfgC.add("		/* #{excnoVal} */")
end

$kernelCfgC.append(<<EOS)
	PowerON_Reset_PC		/* 31:Reset*/
};

EOS

#
#  割込み要求ライン属性に関するターゲット依存のエラーチェック
#
$cfgData[:CFG_INT].each do |key, params|
  # IRQ割込み番号かどうかをチェック
  if $INTNO_INT.include?(key)
    # TA_POSEDGEとTA_NEGEDGEが同時に設定されている場合
    if (params[:intatr].val & $TA_POSEDGE|$TA_NEGEDGE) == $TA_POSEDGE|$TA_NEGEDGE
      error_illegal_sym("E_RSATR", params, :intatr, :intno)
    end
    # TA_POSEDGEとTA_BOTHEDGEが同時に設定されている場合
    if (params[:intatr].val & $TA_POSEDGE|$TA_BOTHEDGE) == $TA_POSEDGE|$TA_BOTHEDGE
      error_illegal_sym("E_RSATR", params, :intatr, :intno)
    end
    # TA_NEGEDGEとTA_BOTHEDGEが同時に設定されている場合
    if (params[:intatr].val & $TA_NEGEDGE|$TA_BOTHEDGE) == $TA_NEGEDGE|$TA_BOTHEDGE
      error_illegal_sym("E_RSATR", params, :intatr, :intno)
    end
    # TA_POSEDGEとTA_NEGEDGEとTA_BOTHEDGEが同時に設定されている場合
    if (params[:intatr].val & $TA_POSEDGE|$TA_NEGEDGE|$TA_BOTHEDGE) == $TA_POSEDGE|$TA_NEGEDGE|$TA_BOTHEDGE
      error_illegal_sym("E_RSATR", params, :intatr, :intno)
    end
  else
    # IRQ割込み以外の割込みに対して割込み属性が指定されている場合
    if (params[:intatr].val & (~($TA_ENAINT|$TA_EDGE))) != 0
      error_illegal_sym("E_RSATR", params, :intatr, :intno)
    end
  end
end
